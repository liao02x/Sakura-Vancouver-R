}
le_qua_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ poly(year - offset, 2, raw = TRUE), dat)
setNames(coef(the_fit), c("intercept", "poly 1", "poly 2"))
}
model_lin <- le_lin_fit(gapminder %>% filter(country == "Zimbabwe"))
model_qua <- le_qua_fit(gapminder %>% filter(country == "Zimbabwe"))
model_lin
model_qua
#model_lin.Named
years = seq(1952, 2007, 5)
le_lin = model_lin[1] + (years - 1952) * model_lin[2]
le_qua = model_qua[1] + (years - 1952) * model_qua[2] + (years - 1952)^2 * model_qua[3]
plot(years, le_qua)
le_plot(gapminder %>% filter(country == "Zimbabwe"))
le_plot <- function(dat) {
ggplot(dat, aes(x = year, y = lifeExp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
}
le_lin_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ I(year - offset), dat)
setNames(coef(the_fit), c("intercept", "slope"))
}
le_qua_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ poly(year - offset, 2, raw = TRUE), dat)
setNames(coef(the_fit), c("intercept", "poly 1", "poly 2"))
}
gap_zim <- gapminder %>% filter(country == "Zimbabwe")
model_lin <- le_lin_fit(gap_zim)
model_qua <- le_qua_fit(gap_zim)
model_lin
model_qua
#model_lin.Named
years = seq(1952, 2007, 5)
le_lin = model_lin[1] + (years - 1952) * model_lin[2]
le_qua = model_qua[1] + (years - 1952) * model_qua[2] + (years - 1952)^2 * model_qua[3]
#le_plot(gap_zim)
ggplot(gap_zim, aes(x = year, y = lifeExp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
le_plot <- function(dat) {
ggplot(dat, aes(x = year, y = lifeExp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
}
le_lin_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ I(year - offset), dat)
setNames(coef(the_fit), c("intercept", "slope"))
}
le_qua_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ poly(year - offset, 2, raw = TRUE), dat)
setNames(coef(the_fit), c("intercept", "poly 1", "poly 2"))
}
gap_zim <- gapminder %>% filter(country == "Zimbabwe")
model_lin <- le_lin_fit(gap_zim)
model_qua <- le_qua_fit(gap_zim)
model_lin
model_qua
#model_lin.Named
years = seq(1952, 2007, 5)
le_lin = model_lin[1] + (years - 1952) * model_lin[2]
le_qua = model_qua[1] + (years - 1952) * model_qua[2] + (years - 1952)^2 * model_qua[3]
#le_plot(gap_zim)
ggplot(gap_zim, aes(x = year, y = lifeExp)) +
geom_point()
le_plot <- function(dat) {
ggplot(dat, aes(x = year, y = lifeExp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
}
le_lin_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ I(year - offset), dat)
setNames(coef(the_fit), c("intercept", "slope"))
}
le_qua_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ poly(year - offset, 2, raw = TRUE), dat)
setNames(coef(the_fit), c("intercept", "poly 1", "poly 2"))
}
gap_zim <- gapminder %>% filter(country == "Zimbabwe")
model_lin <- le_lin_fit(gap_zim)
model_qua <- le_qua_fit(gap_zim)
model_lin
model_qua
#model_lin.Named
years = seq(1952, 2007, 5)
le_lin = model_lin[1] + (years - 1952) * model_lin[2]
le_qua = model_qua[1] + (years - 1952) * model_qua[2] + (years - 1952)^2 * model_qua[3]
le_fit = tibble(
year = years,
le_lin = le_lin,
le_qua = le_qua
)
#le_plot(gap_zim)
ggplot(gap_zim, aes(x = year, y = lifeExp)) +
geom_point() +
geom_line(aes(x = year, y = le_lin), le_fit)
le_plot <- function(dat) {
ggplot(dat, aes(x = year, y = lifeExp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
}
le_lin_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ I(year - offset), dat)
setNames(coef(the_fit), c("intercept", "slope"))
}
le_qua_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ poly(year - offset, 2, raw = TRUE), dat)
setNames(coef(the_fit), c("intercept", "poly 1", "poly 2"))
}
gap_zim <- gapminder %>% filter(country == "Zimbabwe")
model_lin <- le_lin_fit(gap_zim)
model_qua <- le_qua_fit(gap_zim)
model_lin
model_qua
#model_lin.Named
years = seq(1952, 2007, 5)
le_lin = model_lin[1] + (years - 1952) * model_lin[2]
le_qua = model_qua[1] + (years - 1952) * model_qua[2] + (years - 1952)^2 * model_qua[3]
le_fit = tibble(
year = years,
le_lin = le_lin,
le_qua = le_qua
)
#le_plot(gap_zim)
ggplot(gap_zim, aes(x = year, y = lifeExp)) +
geom_point() +
geom_line(aes(x = year, y = le_qua), le_fit)
le_lin_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ I(year - offset), dat)
setNames(coef(the_fit), c("intercept", "slope"))
}
le_qua_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ poly(year - offset, 2, raw = TRUE), dat)
setNames(coef(the_fit), c("intercept", "poly 1", "poly 2"))
}
gap_zim <- gapminder %>% filter(country == "Zimbabwe")
(model_lin <- le_lin_fit(gap_zim))
(model_qua <- le_qua_fit(gap_zim))
years = seq(1952, 2007, 5)
le_fit = tibble(
year = years,
le_lin = model_lin[1] + (years - 1952) * model_lin[2],
le_qua = model_qua[1] + (years - 1952) * model_qua[2] + (years - 1952)^2 * model_qua[3]
)
ggplot(gap_zim, aes(x = year, y = lifeExp)) +
geom_point() +
geom_line(aes(x = year, y = le_qua), le_fit)
le_lin_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ I(year - offset), dat)
setNames(coef(the_fit), c("intercept", "slope"))
}
le_qua_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ poly(year - offset, 2, raw = TRUE), dat)
setNames(coef(the_fit), c("intercept", "poly 1", "poly 2"))
}
gap_zim <- gapminder %>% filter(country == "Zimbabwe")
(model_lin <- le_lin_fit(gap_zim))
(model_qua <- le_qua_fit(gap_zim))
years = seq(1952, 2007, 5)
le_fit = tibble(
year = years,
le_lin = model_lin[1] + (years - 1952) * model_lin[2],
le_qua = model_qua[1] + (years - 1952) * model_qua[2] + (years - 1952)^2 * model_qua[3]
)
ggplot(gap_zim, aes(x = year, y = lifeExp)) +
geom_point() +
geom_line(aes(x = year, y = le_lin), le_fit, color = "blue")
geom_line(aes(x = year, y = le_qua), le_fit, color = "red")
le_lin_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ I(year - offset), dat)
setNames(coef(the_fit), c("intercept", "slope"))
}
le_qua_fit <- function(dat, offset = 1952) {
the_fit <- lm(lifeExp ~ poly(year - offset, 2, raw = TRUE), dat)
setNames(coef(the_fit), c("intercept", "poly 1", "poly 2"))
}
gap_zim <- gapminder %>% filter(country == "Zimbabwe")
(model_lin <- le_lin_fit(gap_zim))
(model_qua <- le_qua_fit(gap_zim))
years = seq(1952, 2007, 5)
le_fit = tibble(
year = years,
le_lin = model_lin[1] + (years - 1952) * model_lin[2],
le_qua = model_qua[1] + (years - 1952) * model_qua[2] + (years - 1952)^2 * model_qua[3]
)
ggplot(gap_zim, aes(x = year, y = lifeExp)) +
geom_point() +
geom_line(aes(x = year, y = le_lin), le_fit, color = "blue") +
geom_line(aes(x = year, y = le_qua), le_fit, color = "red")
txt <- "What does `str_wrap()` do? When might you want to use it?"
cat(str_wrap(txt, width = 40, indent = 2))
selectInput("countryInput", "Country",
sort(unique(bcl$Country)),
selected = "CANADA")
library(shiny)
library(ggplot2)
library(dplyr)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("BC Liquor Store prices"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput", "Price", 0, 100, c(25, 40), pre = "$"),
radioButtons("typeInput", "Product type",
choices = c("BEER", "REFRESHMENT", "SPIRITS", "WINE"),
selected = "WINE"),
uiOutput("countryOutput")
),
mainPanel(
plotOutput("coolplot"),
br(), br(),
tableOutput("results")
)
)
)
server <- function(input, output) {
output$countryOutput <- renderUI({
selectInput("countryInput", "Country",
sort(unique(bcl$Country)),
selected = "CANADA")
})
filtered <- reactive({
if (is.null(input$countryInput)) {
return(NULL)
}
bcl %>%
filter(Price >= input$priceInput[1],
Price <= input$priceInput[2],
Type == input$typeInput,
Country == input$countryInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(Alcohol_Content)) +
geom_histogram()
})
output$results <- renderTable({
filtered()
})
}
shinyApp(ui = ui, server = server)
setwd("C:\Users\Minzhi\OneDrive\STAT545\assignment\hw08-liao02x\bcl")
setwd("C:\\Users\\Minzhi\\OneDrive\\STAT545\\assignment\\hw08-liao02x\\bcl")
library(shiny)
library(ggplot2)
library(dplyr)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("BC Liquor Store prices"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput", "Price", 0, 100, c(25, 40), pre = "$"),
radioButtons("typeInput", "Product type",
choices = c("BEER", "REFRESHMENT", "SPIRITS", "WINE"),
selected = "WINE"),
uiOutput("countryOutput")
),
mainPanel(
plotOutput("coolplot"),
br(), br(),
tableOutput("results")
)
)
)
server <- function(input, output) {
output$countryOutput <- renderUI({
selectInput("countryInput", "Country",
sort(unique(bcl$Country)),
selected = "CANADA")
})
filtered <- reactive({
if (is.null(input$countryInput)) {
return(NULL)
}
bcl %>%
filter(Price >= input$priceInput[1],
Price <= input$priceInput[2],
Type == input$typeInput,
Country == input$countryInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(Alcohol_Content)) +
geom_histogram()
})
output$results <- renderTable({
filtered()
})
}
shinyApp(ui = ui, server = server)
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderText
?paste
?renderText
runApp()
runApp()
runApp()
?downloadButton
?downloadHandler
runApp()
runApp()
?write.csv
?ggsave
runApp()
runApp()
runApp()
?tabsetPanel
?tabPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
runApp()
str(sort(unique(bcl$Country)))
str(c("ALL", sort(unique(bcl$Country))))
runApp()
runApp()
runApp()
str(C("ALL", sort(unique(bcl$Country))))
str(sort(unique(bcl$Country)))
C("ALL", sort(unique(bcl$Country)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
my <- "4"
my
my()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tags
?tags$a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?includeCSS
runApp()
runApp()
runApp()
includeCSS("www/bcl.css")
runApp()
includeCSS("www/bcl.css")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?hr
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?div
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
